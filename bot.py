import asyncio
import math
from alerts_in_ua import AsyncClient as AsyncAlertsClient
from telegram.request import HTTPXRequest
import telegram
import subprocess
import json
from datetime import datetime
import logging

ALERTSTOKEN = "Alerts_in_ua_token"  #–¢–æ–∫–µ–Ω alerts.in.ua api
TGTOKEN = "Telegram_bot_token"      #–¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
CHAT_ID = "Group_chat_id"           #ID –≥—Ä—É–ø–∏
THREAD_ID = "Group_thread_id"       #ID –≥—ñ–ª–∫–∏ –≤ –≥—Ä—É–ø—ñ
lastmess = 0
lasteppo = 0

trequest = HTTPXRequest(connection_pool_size=20)
bot = telegram.Bot(TGTOKEN, request=trequest)

logging.basicConfig(level=logging.DEBUG, filename="bot.log", filemode="w", format="%(asctime)s %(levelname)s [%(funcName)s]: %(message)s")

async def sendmess(message):
    while True:
        try:
            await bot.send_message(chat_id=CHAT_ID, text=message, message_thread_id=THREAD_ID, read_timeout=60, write_timeout=60, connect_timeout=60)
            logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            return
        
        except telegram.error.TelegramError as e:
            logging.error(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ Telegram")
            await asyncio.sleep(15)

        except asyncio.CancelledError as e:
            logging.error(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ CancelledError")
            await asyncio.sleep(15)

        except Exception as e:
            logging.error(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏")
            await asyncio.sleep(15)

async def eppo():
    global lastmess
    global lasteppo
    target = "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞ —Ä—É—Ö–∞—î—Ç—å—Å—è —É –≤–∞—à–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É"
    logging.info("–ó–∞–ø—É—â–µ–Ω–æ —î–ø–ø–æ")

    while True:

        if lastmess == 0:
            logging.info("–Ñ–ø–ø–æ –∑–∞–≤–µ—Ä—à—É—î —Å–≤–æ—é —Ä–æ–±–æ—Ç—É")
            return

        try:
            logging.debug("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ —î–ø–ø–æ")
            result = subprocess.run(['termux-notification-list'], capture_output=True, text=True)
            notifications = json.loads(result.stdout)

            for notification in notifications:
                if target in notification['content']:
                    messtime = notification['when']

                    if isinstance(messtime, str):
                        messtime = int(datetime.strptime(messtime, "%Y-%m-%d %H:%M:%S").timestamp() * 1000)

                    if messtime > lasteppo:
                        logging.info("–ó–∞–≥—Ä–æ–∑–∞ –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è!")

                        message = "‚ùóÔ∏è –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞ —Ä—É—Ö–∞—î—Ç—å—Å—è —É –Ω–∞—à–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É! ‚ùóÔ∏è"
                        await sendmess(message)
                        
                        logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
                        lasteppo = messtime
                        logging.debug(f"lasteppo == {lasteppo}")

            logging.debug("–ó–∞—Å–∏–Ω–∞—é")
            await asyncio.sleep(15)

        except asyncio.CancelledError as e:
            logging.error(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ CancelledError")
            await asyncio.sleep(15)

        except Exception as e:
            logging.error(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏")
            await asyncio.sleep(15)


async def main():
    alerts_client = AsyncAlertsClient(token=ALERTSTOKEN)
    global lastmess
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    
    while True:
        try:
            logging.debug("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ alerts.in.ua")
            alert_status = await alerts_client.get_air_raid_alert_status(31)
            status_text = alert_status.status
            logging.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {status_text}")

            if "no_alert" in status_text:
                if lastmess == 1:
                    logging.info("–í—ñ–¥–±—ñ–π")
                    message = "üü¢ –í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ üü¢"
                    await sendmess(message)
                    lastmess = 0
                    logging.debug(f"lastmess == {lastmess}")
            else:
                if "active" in status_text:
                    if lastmess == 0:
                        logging.info("–¢—Ä–∏–≤–æ–≥–∞")
                        message = "üî¥ –£–≤–∞–≥–∞! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞! üî¥"
                        await sendmess(message)
                        lastmess = 1
                        logging.debug(f"lastmess == {lastmess}")

                        logging.info("–ó–∞–ø—É—Å–∫ —î–ø–ø–æ")
                        asyncio.create_task(eppo())

            logging.debug("–ó–∞—Å–∏–Ω–∞—é")
            await asyncio.sleep(60)

        except asyncio.CancelledError as e:
            logging.error(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ CancelledError")
            await asyncio.sleep(15)

        except Exception as e:
            logging.error(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏")
            await asyncio.sleep(15)


if __name__ == "__main__":    
    while True:
        try:
            asyncio.run(main())
        except Exception as e:
            logging.critical(e)
            logging.debug("–ó–∞—Å–∏–Ω–∞—é –ø—ñ—Å–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏")
            asyncio.sleep(15)
